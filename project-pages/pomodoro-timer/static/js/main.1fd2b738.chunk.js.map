{"version":3,"sources":["components/Timer.jsx","components/SpecialControls.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Timer","react_default","a","createElement","className","id","style","this","props","alarmColor","minutes","secs","cycleMessage","onClick","reset","startStop","buttonText","Component","SpecialControls","type","decrement","length","increment","Pomodoro","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","appState","timerState","sessionMins","breakMins","displayMins","cycleCount","color","resetAll","bind","assertThisInitialized","handleTimer","runTimer","cycleHandler","handleSeshUp","handleSeshDown","handleBreakUp","handleBreakDown","intervalHandle","clear","setState","accurateInterval","alert","clearInterval","components_Timer","components_SpecialControls","s","React","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1fd2b738.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Timer extends Component {\n  render() {\n    return (\n      <div className=\"Timer flex-please\">\n        <span id=\"time-left\" style={this.props.alarmColor}> {this.props.minutes}:{this.props.secs} </span>\n        <span id=\"timer-label\"> {this.props.cycleMessage} </span>\n        <div id=\"Tbutton-container\">\n          <button id=\"reset\" className=\"Tbutton\" onClick={this.props.reset}>Reset</button>\n          <button id=\"start_stop\" className=\"Tbutton\" onClick={this.props.startStop}>{this.props.buttonText}</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Timer;","import React, { Component } from 'react';\n\nclass SpecialControls extends Component {\n  render() {\n    return (\n      <div className=\"SpecControls flex-please\">\n        <span id=\"label\">{this.props.type} Length:</span>\n        <div className=\"SpecButton-container\">\n          <button id=\"decButton\" className=\"SpecButton\" onClick={this.props.decrement}>-</button>\n          <span id=\"length\" className=\"SettingReadout\">{this.props.length}</span>\n          <button id=\"incButton\" className=\"SpecButton\" onClick={this.props.increment}>+</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SpecialControls;","import React from 'react';\nimport accurate from 'accurate-interval';\nimport './App.css';\nimport Timer from './components/Timer';\nimport SpecialControls from './components/SpecialControls';\nimport accurateInterval from 'accurate-interval';\n\nclass Pomodoro extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      appState: 'fresh',\n      timerState: 'none',\n      sessionMins: 25,\n      breakMins: 5,\n      displayMins: 25,\n      secs: 0,\n      cycleCount: 0,\n      alarmColor: { color: '#84ef45' }\n    }\n    this.resetAll = this.resetAll.bind(this);\n\n    this.handleTimer = this.handleTimer.bind(this);\n    this.runTimer = this.runTimer.bind(this);\n    this.cycleHandler = this.cycleHandler.bind(this);\n\n    this.handleSeshUp = this.handleSeshUp.bind(this);\n    this.handleSeshDown = this.handleSeshDown.bind(this);\n    this.handleBreakUp = this.handleBreakUp.bind(this);\n    this.handleBreakDown = this.handleBreakDown.bind(this);\n  }\n\n  resetAll() {\n    this.intervalHandle.clear();\n    this.setState({\n      appState: 'fresh',\n      timerState: 'none',\n      sessionMins: 25,\n      breakMins: 5,\n      displayMins: 25,\n      secs: 0,\n      cycleCount: 0,\n      alarmColor: { color: '#84ef45' }\n    });\n  }\n\n  handleTimer() {\n    switch (this.state.timerState) {\n      case 'none':\n        this.setState({\n          appState: 'session',\n          timerState: 'running'\n        });\n        this.intervalHandle = accurateInterval(this.runTimer, 1000);\n        break;\n      case 'paused':\n        this.setState({\n          timerState: 'running'\n        });\n        this.intervalHandle = accurateInterval(this.runTimer, 1000);\n        break;\n      case 'running':\n        this.setState({\n          timerState: 'paused'\n        });\n        this.intervalHandle.clear();\n        break;\n      default:\n        alert('handleTimer error');\n    }\n  }\n  runTimer() {\n    if (this.state.displayMins == 1 && this.state.secs == 0) {\n      this.setState({\n        alarmColor: { color: '#cf6679' }\n      });\n    }\n    if (this.state.displayMins == 0 && this.state.secs == 0) {\n      this.cycleHandler();\n    } else if (this.state.secs == 0) {\n      this.setState({\n        secs: 59,\n        displayMins: this.state.displayMins - 1,\n      });\n    } else {\n      this.setState({\n        secs: this.state.secs - 1\n      });\n    }\n  }\n  cycleHandler() { // even == 'session' , odd == 'break'\n    if (this.state.cycleCount == 7) {\n      this.resetAll();\n      clearInterval(this.intervalHandle);\n    } else if (this.state.cycleCount % 2 == 0) {\n      this.setState({\n        appState: 'break',\n        displayMins: this.state.breakMins,\n        cycleCount: this.state.cycleCount + 1,\n        alarmColor: { color: '#7eeedb' }\n      });\n    } else {\n      this.setState({\n        appState: 'session',\n        displayMins: this.state.sessionMins,\n        cycleCount: this.state.cycleCount + 1,\n        alarmColor: { color: '#84ef45' }\n      });\n    }\n  }\n\n  handleSeshUp() {\n    if (this.state.sessionMins < 60) {\n      switch (this.state.appState) {\n        case 'fresh':\n          this.setState({\n            sessionMins: this.state.sessionMins + 1,\n            displayMins: this.state.displayMins + 1\n          });\n          break;\n        case 'session':\n          this.setState({\n            displayMins: this.state.displayMins + 1,\n            alarmColor: { color: '#84ef45' }\n          });\n          break;\n        case 'break':\n          this.setState({\n            sessionMins: this.state.sessionMins + 1\n          });\n          break;\n        default:\n          alert('handleSeshUp broken')\n      }\n    }\n  }\n  handleSeshDown() {\n    if (this.state.sessionMins >= 1) {\n      if (this.state.appState == 'fresh' && this.state.displayMins > 1) {\n        this.setState({\n          displayMins: this.state.displayMins - 1,\n          sessionMins: this.state.sessionMins - 1\n        });\n      }\n      if (this.state.appState == 'session' && this.state.displayMins > 0) {\n        this.setState({\n          displayMins: this.state.displayMins - 1\n        });\n        if (this.state.displayMins == 1) {\n          this.setState({\n            alarmColor: { color: '#cf6679' }\n          });\n        }\n      }\n      if (this.state.appState == 'break' && this.state.sessionMins > 1) {\n        this.setState({\n          sessionMins: this.state.sessionMins - 1\n        });\n      }\n    }\n  }\n  handleBreakUp() {\n    if (this.state.breakMins < 30) {\n      if (this.state.appState == 'fresh' || this.state.appState == 'session') {\n        this.setState({\n          breakMins: this.state.breakMins + 1\n        });\n      } else if (this.state.appState == 'break') {\n        this.setState({\n          displayMins: this.state.displayMins + 1,\n          alarmColor: { color: '#7eeedb' }\n        });\n      }\n    }\n  }\n  handleBreakDown() {\n    if (this.state.breakMins >= 1) {\n      if ((this.state.appState == 'fresh' || this.state.appState == 'session') && this.state.breakMins > 1) {\n        this.setState({\n          breakMins: this.state.breakMins - 1\n        });\n      }\n      if (this.state.appState == 'break' && this.state.displayMins > 0) {\n        this.setState({\n          displayMins: this.state.displayMins - 1,\n        });\n        if (this.state.displayMins == 1) {\n          this.setState({\n            alarmColor: { color: '#cf6679' }\n          });\n        }\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Main flex-please\">\n        <h1>Pomodoro Timer</h1>\n        <Timer\n          alarmColor={this.state.alarmColor}\n          minutes={this.state.displayMins}\n          secs={(this.state.appState == 'fresh') ? '00' : (this.state.secs < 10) ? '0' + this.state.secs : this.state.secs}\n          cycleMessage={(this.state.appState == 'fresh') ? 'Press Start' : (this.state.appState == 'session') ? 'Session' : 'Break'}\n          buttonText={(this.state.timerState == 'running') ? 'Pause' : 'Start'}\n          reset={this.resetAll}\n          startStop={this.handleTimer}\n        />\n        <div className=\"Settings-container\">\n          <SpecialControls\n            type='Session'\n            s={(this.state.sessionMins > 1) ? 's' : ''}\n            length={this.state.sessionMins}\n            decrement={this.handleSeshDown}\n            increment={this.handleSeshUp}\n          />\n          <SpecialControls\n            type='Break'\n            s={(this.state.breakMins > 1) ? 's' : ''}\n            length={this.state.breakMins}\n            decrement={this.handleBreakDown}\n            increment={this.handleBreakUp}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Pomodoro;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pomodoro from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Pomodoro />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}